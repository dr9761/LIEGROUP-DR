clc;clear;
close all;
%% Change Working Dictionary
Welcome_to_Programm;
%% Configure Working Directory
FullPathOfProject = Configure_WorkingDirectory;
%% Load Sub-Module
Load_SubModule(FullPathOfProject);
%% Load Parameter from Excel File
% ExcelFileName = ...
% 	'Lattice Boom Crane Display Version';
% ExcelFileDir = [...
% 	'Parameter File', ...
% 	'\Lattice boom crane model'];

% ExcelFileName = ...
% 	'100t';
% ExcelFileDir = [...
% 	'Parameter File', ...
% 	'\Lattice boom crane model', ...
% 	'\Truss Equivalent Model', ...
% 	'\Load in Air'];

% ExcelFileName = ...
% 	'Super Truss Element Pendulum Test';
% ExcelFileDir = [...
% 	'Parameter File\Pendulum Test\Super Truss Element Pendulum Test'];

ExcelFileName = ...
	'Cubic Spline Beam Pendulum - 1 Segments';
ExcelFileDir = [...
	'Parameter File\Pendulum Test\Cubic Spline Beam Pendulum Test'];

%%
[ModelParameter,SolverParameter] = ...
	Set_AllParameter_from_ExcelFile(ExcelFileName,ExcelFileDir);
% load('Result\Lattice Boom Crane 100t Static Position\ControlVariable_Func.mat', ...
% 	'L13_FitCurve','L15_FitCurve','MainBoomAngle_init','deltaL_init');
% MainBoomAngle = MainBoomAngle_init;
% deltaL = deltaL_init;
% [ModelParameter] = Calc_LatticeBoomCrane_InitialCoordinate(...
% 	MainBoomAngle,deltaL,ModelParameter);
% ModelParameter.PreProcessingData.L13_FitCurve = L13_FitCurve;
% ModelParameter.PreProcessingData.L15_FitCurve = L15_FitCurve;

% SolverParameter.ODE_Solver.t_end = 30;
% StaticPosition = ...
% 	load('LatticeBoomCrane_Simplify400t_HorizontalPosture_StaticPosition.mat');
% ModelParameter.InitialState.q0 = StaticPosition.q;
% ModelParameter.InitialState.x0 = [...
% 	ModelParameter.InitialState.q0;ModelParameter.InitialState.dq0];
%% Action Function
SolverParameter.ActionFunction = get_ActionFunction('None');
%% Load Existing Initial State
exist_InitialState = false;
InitialStateFileName = [...
	'Result\Lattice Boom Crane\Super Truss Element\', ...
	'Lattice Boom Crane Static Tol=0.01 MaxStep=0.02\Result.mat'];
ModelParameter.InitialState = ...
	Load_Existing_InitialState(exist_InitialState, ...
	InitialStateFileName,ModelParameter);
%% plot Initial State
do_plot_InitialState = true;
InitalStateAxes = plot_InitialState(do_plot_InitialState, ...
	ModelParameter,SolverParameter);

%% Static Position
tic;
% Static_Start_Position = SolverParameter.StaticPosition.do_Calc;
% max_VelocityAcceleration_Tolerance = ...
% 	SolverParameter.StaticPosition.max_Tol;
% x0 = Calc_Static_Position(...
% 	Static_Start_Position,max_VelocityAcceleration_Tolerance, ...
% 	ModelParameter,SolverParameter,opt,InitalStateAxes);
%% time span for dynamic ODE
t_start = SolverParameter.ODE_Solver.t_start;
t_end = SolverParameter.ODE_Solver.t_end;
tspan = [t_start;t_end];
%% Statics
do_Statics_Calculation = true;
if do_Statics_Calculation
	q0 = ModelParameter.InitialState.q0;
	SystemForceFcn = @(q)Multi_Body_Dynamics_Force(q,tspan, ...
		ModelParameter,SolverParameter);
	%
	fsolve_PlotFcn_Handle = ...
		@(x,optimValues,state,varargin)optimplot_Mechanism(...
		x,optimValues,state,varargin, ...
		ModelParameter,SolverParameter);
	opt = optimoptions('fsolve', ...
		'Algorithm','trust-region', ...
		'StepTolerance',1e-12, ...
		'FunctionTolerance',1e-12, ...
		'SpecifyObjectiveGradient',false, ...
		'Display','iter', ...
		'MaxIterations',40000, ...
		'PlotFcn',fsolve_PlotFcn_Handle);
	[q_Static,Force_Static,StaticFlag,output,jacobian] = ...
		fsolve(SystemForceFcn,q0,opt);
	StaticError = SystemForceFcn(q_Static);
	MaxAbsStaticError=max(abs(StaticError));
	%
	dq_Static = zeros(size(q_Static));
	x_Static = [q_Static;dq_Static];
	x0 = x_Static;
	dx0 = Multi_Body_Dynamics_func(0,x0,tspan, ...
		ModelParameter,SolverParameter,[]);
	%
	plot_Mechanism(q_Static, ...
		ModelParameter,SolverParameter,InitalStateAxes);
else
	x0 = ModelParameter.InitialState.x0;
end
%% set ODE Solver Option
opt = set_ODESolver_Option(ModelParameter,SolverParameter);
%% dynamic ode
do_Dynamics_Calculation = true;
if do_Dynamics_Calculation
	[t_set,x_set] = Dynamics_ODE_Solver(...
		tspan,ModelParameter,SolverParameter, ...
		x0,opt);
end
%
SolvingTime = toc;
%%
% lambda_set = [];
% for TimeNr = 1:numel(t_set)
% 	t = t_set(TimeNr);
% 	x = x_set(TimeNr,:);
% 	x = x';
% 	lambda = ...
% 		Multi_Body_Dynamics_lambda(t,x,tspan, ...
% 		ModelParameter,SolverParameter);
% 	lambda_set = [lambda_set,lambda];
% end
%% Save Result
do_save_Result = true;
save_Result(do_save_Result, ...
	ExcelFileDir,ExcelFileName, ...
	ModelParameter,SolverParameter, ...
	opt,tspan,x_set,t_set,SolvingTime);
%%
% FinalResultFigure = figure('Name','Final Result');
% FinalResultFigure = axes(FinalResultFigure);
% pause(0.01);
% plot_Mechanism_PostProcessing(x_set,t_set, ...
% 	ModelParameter,SolverParameter,FinalResultFigure);
%%
fprintf('Finished!\n');
